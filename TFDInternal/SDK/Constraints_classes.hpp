#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Constraints

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "AnimationCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "Constraints_structs.hpp"


namespace SDK
{

// Class Constraints.TickableConstraint
// 0x0050 (0x0078 - 0x0028)
class UTickableConstraint : public UObject
{
public:
	struct FConstraintTickFunction                ConstraintTick;                                    // 0x0028(0x0048)(NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickableConstraint">();
	}
	static class UTickableConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickableConstraint>();
	}
};

// Class Constraints.TickableTransformConstraint
// 0x0020 (0x0098 - 0x0078)
class UTickableTransformConstraint : public UTickableConstraint
{
public:
	class UTransformableHandle*                   ParentTRSHandle;                                   // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTransformableHandle*                   ChildTRSHandle;                                    // 0x0080(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOffset;                                   // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDynamicOffset;                                    // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformConstraintType                      Type;                                              // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickableTransformConstraint">();
	}
	static class UTickableTransformConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickableTransformConstraint>();
	}
};

// Class Constraints.TickableTranslationConstraint
// 0x0018 (0x00B0 - 0x0098)
class UTickableTranslationConstraint final : public UTickableTransformConstraint
{
public:
	uint8                                         Pad_98[0x4];                                       // 0x0098(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetTranslation;                                 // 0x009C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFilterOptionPerAxis                   AxisFilter;                                        // 0x00A8(0x0003)(BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickableTranslationConstraint">();
	}
	static class UTickableTranslationConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickableTranslationConstraint>();
	}
};

// Class Constraints.TransformableHandle
// 0x0030 (0x0058 - 0x0028)
class UTransformableHandle : public UObject
{
public:
	struct FMovieSceneObjectBindingID             ConstraintBindingID;                               // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x18];                                      // 0x0040(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TransformableHandle">();
	}
	static class UTransformableHandle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTransformableHandle>();
	}
};

// Class Constraints.ConstraintsActor
// 0x0008 (0x0250 - 0x0248)
class AConstraintsActor final : public AActor
{
public:
	class UConstraintsManager*                    ConstraintsManager;                                // 0x0248(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ConstraintsActor">();
	}
	static class AConstraintsActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AConstraintsActor>();
	}
};

// Class Constraints.ConstraintsManager
// 0x0020 (0x0048 - 0x0028)
class UConstraintsManager final : public UObject
{
public:
	FMulticastSparseDelegateProperty_             OnConstraintAdded_BP;                              // 0x0028(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnConstraintRemoved_BP;                            // 0x0029(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0xE];                                       // 0x002A(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTickableConstraint*>            Constraints;                                       // 0x0038(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ConstraintsManager">();
	}
	static class UConstraintsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConstraintsManager>();
	}
};

// Class Constraints.ConstraintsScriptingLibrary
// 0x0000 (0x0028 - 0x0028)
class UConstraintsScriptingLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AddConstraint(class UWorld* InWorld, class UTransformableHandle* InParentHandle, class UTransformableHandle* InChildHandle, class UTickableTransformConstraint* InConstraint, const bool bMaintainOffset);
	static class UTickableTransformConstraint* CreateFromType(class UWorld* InWorld, const ETransformConstraintType InType);
	static class UTransformableComponentHandle* CreateTransformableComponentHandle(class UWorld* InWorld, class USceneComponent* InSceneComponent, const class FName& InSocketName);
	static class UTransformableHandle* CreateTransformableHandle(class UWorld* InWorld, class UObject* InObject, const class FName& InAttachmentName);
	static TArray<class UTickableConstraint*> GetConstraintsArray(class UWorld* InWorld);
	static class UConstraintsManager* GetManager(class UWorld* InWorld);
	static bool RemoveConstraint(class UWorld* InWorld, int32 InIndex);
	static bool RemoveThisConstraint(class UWorld* InWorld, class UTickableConstraint* InTickableConstraint);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ConstraintsScriptingLibrary">();
	}
	static class UConstraintsScriptingLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConstraintsScriptingLibrary>();
	}
};

// Class Constraints.TransformableComponentHandle
// 0x0010 (0x0068 - 0x0058)
class UTransformableComponentHandle final : public UTransformableHandle
{
public:
	TWeakObjectPtr<class USceneComponent>         Component;                                         // 0x0058(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TransformableComponentHandle">();
	}
	static class UTransformableComponentHandle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTransformableComponentHandle>();
	}
};

// Class Constraints.TickableRotationConstraint
// 0x0028 (0x00C0 - 0x0098)
class UTickableRotationConstraint final : public UTickableTransformConstraint
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  OffsetRotation;                                    // 0x00A0(0x0010)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFilterOptionPerAxis                   AxisFilter;                                        // 0x00B0(0x0003)(BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B3[0xD];                                       // 0x00B3(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickableRotationConstraint">();
	}
	static class UTickableRotationConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickableRotationConstraint>();
	}
};

// Class Constraints.TickableScaleConstraint
// 0x0018 (0x00B0 - 0x0098)
class UTickableScaleConstraint final : public UTickableTransformConstraint
{
public:
	uint8                                         Pad_98[0x4];                                       // 0x0098(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetScale;                                       // 0x009C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFilterOptionPerAxis                   AxisFilter;                                        // 0x00A8(0x0003)(BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickableScaleConstraint">();
	}
	static class UTickableScaleConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickableScaleConstraint>();
	}
};

// Class Constraints.TickableParentConstraint
// 0x0048 (0x00E0 - 0x0098)
class UTickableParentConstraint final : public UTickableTransformConstraint
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetTransform;                                   // 0x00A0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bScaling;                                          // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTransformFilter                       TransformFilter;                                   // 0x00D1(0x0009)(BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickableParentConstraint">();
	}
	static class UTickableParentConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickableParentConstraint>();
	}
};

// Class Constraints.TickableLookAtConstraint
// 0x0010 (0x00A8 - 0x0098)
class UTickableLookAtConstraint final : public UTickableTransformConstraint
{
public:
	struct FVector                                Axis;                                              // 0x0098(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickableLookAtConstraint">();
	}
	static class UTickableLookAtConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTickableLookAtConstraint>();
	}
};

}

