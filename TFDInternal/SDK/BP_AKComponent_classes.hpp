#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AKComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "M1Data_structs.hpp"
#include "M1_structs.hpp"
#include "M1_classes.hpp"
#include "AkAudio_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AKComponent.BP_AKComponent_C
// 0x0090 (0x0710 - 0x0680)
class UBP_AKComponent_C final : public UM1AkComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0680(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsPlayerInitSound;                                 // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           OneShotAkcomp;                                     // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        RPM_Accelation;                                    // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fireinterval;                                      // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsContinousFiring_;                                // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StopFireAkEventName;                               // 0x06B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        CuRound_Rate;                                      // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EM1DynamicDialogueStimulus                    VoStimulus;                                        // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeboneTarget;                                      // 0x06D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CampString;                                        // 0x06E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ReadyPlayCampVoice;                                // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrologLoadDynamicBank_;                            // 0x06F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F2[0x2];                                      // 0x06F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BRCharge_Level;                                    // 0x06F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReverse;                                          // 0x06F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rapid_Hit;                                         // 0x06F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FA[0x6];                                      // 0x06FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentWeaponType;                                 // 0x0700(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void BP_OnAbilityActorDestroyed(const struct FVector& Location, const struct FRotator& Rotation);
	void BP_OnAbilityActorSpawned();
	void BP_OnAbilityProjectileBounce(const struct FVector& Velocity);
	void BP_OnAbilityProjectileExplosion(const struct FVector& Location, const struct FRotator& Rotation);
	void BP_OnAbilityProjectileHit(EPhysicalSurface HitSurfaceType, const struct FVector& Location, const struct FRotator& Rotation);
	void BP_OnAbilityProjectilePassBy(const struct FVector& Velocity);
	void BP_OnApplyBattleVoice(bool InActivate);
	void BP_OnChangeAudioMixOption(EM1AudioMix InOption);
	void BP_OnChangedTimeDilation(float Rate);
	void BP_OnChangedWeaponByHold();
	void BP_OnChangeGamePadVibrationAmount(float InMount);
	void BP_OnChangeUseGamepadVibration(bool bUse);
	void BP_OnCharacterDie(bool bWeakness);
	void BP_OnCharacterMeleeHit(const class UM1DataSoundEffects* OptionalSoundEffects, EPhysicalSurface HitSurfaceType, const struct FVector& Location);
	void BP_OnCharacterRangeHit(const class UM1DataSoundEffects* SoundEffects, EPhysicalSurface HitSurfaceType, const struct FVector& Location, const struct FRotator& Rotation);
	void BP_OnCharacterReceiveDynamicDialogueAnimNotify(EM1DynamicDialogueStimulus Stimulus, const class FString& InEventName, const TArray<class FString>& ArgPaths);
	void BP_OnCharacterReceiveFootStepAnimNotify(const class FString& SurfaceType, const class FString& CharacterFootStepAction);
	void BP_OnDoorCloseEnd();
	void BP_OnDoorCloseStart();
	void BP_OnDoorOpenEnd();
	void BP_OnDoorOpenStart();
	void BP_OnDropItemObtained();
	void BP_OnDropItemSpawned(EM1ImportanceType InImportanceType);
	void BP_OnHookChangedWireState(EM1WireState State);
	void BP_OnMiniGameFinished(const bool bIsSuccess);
	void BP_OnMiniGameStartedBySpecialCharacter(const EM1MiniGameType InMiniGameType);
	void BP_OnMonsterAIMontageSound(EM1MonsterMontageSoundType MonsterMontageSoundType);
	void BP_OnMonsterDamaged(bool bIsHitWeakPoint);
	void BP_OnMonsterGainKnockStatusEffect();
	void BP_OnMonsterReceiveAnimNotify(class UAkAudioEvent* AkEvent, bool bIsFollowComponent, const class FString& AttachTargetName, class USkeletalMeshComponent* TargetMesh, bool bIsDebugNotify, const struct FVector& Offset);
	void BP_OnMonsterReceiveAnimNotifyEnd(const class UAkComponent* TargetAkComponent, class UAkAudioEvent* AkEvent);
	void BP_OnMonsterReceiveFootStepAnimNotify(EPhysicalSurface SurfaceType, uint8 PlayerFootStepAction);
	void BP_OnMonsterStartMoveByPurpose(EM1AIMovePurpose MovePurpose, bool bInBattle);
	void BP_OnMonsterStartMoveWithDamage();
	void BP_OnMonsterStartNormalMeleeAttack();
	void BP_OnMonsterStartNormalRangedAttack();
	void BP_OnMonsterStartRush();
	void BP_OnMonsterStopMoveByPurpose(EM1AIMovePurpose MovePurpose, bool bInBattle, bool bIdle);
	void BP_OnMovingActorDespawn();
	void BP_OnMovingActorMoveEnd();
	void BP_OnMovingActorMoveStart(const float Speed);
	void BP_OnMovingActorSpawn();
	void BP_OnNpcInteractionStarted();
	void BP_OnNpcLookedAtPlayer();
	void BP_OnNpcPlayerApproached();
	void BP_OnPlayerActiveDBNO();
	void BP_OnPlayerBattleStateChanged(const bool bInBattleState);
	void BP_OnPlayerChangedWireState(EM1WireState State);
	void BP_OnPlayerDamaged(EM1DynamicDialogueStimulus DamageStimulus);
	void BP_OnPlayerDamagedFromDirection(float Angle);
	void BP_OnPlayerEndDebone();
	void BP_OnPlayerEnterArea(const class FString& LocationString);
	void BP_OnPlayerEnterEpicBossRange(const class FString& EpicBossName);
	void BP_OnPlayerExitEpicBossRange(const class FString& EpicBossName);
	void BP_OnPlayerFalling(const float VelocityZ);
	void BP_OnPlayerFirstFailedOfAutoReload(EM1DynamicDialogueStimulus EmptyRoundsStimulus);
	void BP_OnPlayerInitSound();
	void BP_OnPlayerJoinMission();
	void BP_OnPlayerKilledEpicBoss(const class FString& EpicBossName);
	void BP_OnPlayerLanded(const bool Hard);
	void BP_OnPlayerNeedToPlayLocalSound(class UAkAudioEvent* LocalSoundToPlay);
	void BP_OnPlayerOutPlayableArea(class UAkAudioEvent* InActivatedEvent);
	void BP_OnPlayerRangedWeaponChargeGaugeDecrease(class UAkAudioEvent* AkEvent, int32 ChargeLevel);
	void BP_OnPlayerRangedWeaponChargeGaugeIncrease(class UAkAudioEvent* AkEvent, int32 ChargeLevel);
	void BP_OnPlayerRangedWeaponChargeIdle(class UAkAudioEvent* AkEvent);
	void BP_OnPlayerRangedWeaponFired(class UAkAudioEvent* AkEvent, float Fireinterval_0, float RoundRate, int32 ChargeLevel);
	void BP_OnPlayerRangedWeaponStopFire();
	void BP_OnPlayerReceiveAnimNotify(class UAkAudioEvent* AkEvent, bool bIsFollowComponent);
	void BP_OnPlayerReceiveFootStepAnimNotify(EPhysicalSurface SurfaceType, uint8 PlayerFootStepAction);
	void BP_OnPlayerRegisteredCamp();
	void BP_OnPlayerReviveByRescue(const class AM1Player* HelperPlayer);
	void BP_OnPlayerReviveByRespawn();
	void BP_OnPlayerSelectHero(const class FString& SelectedHeroStringID);
	void BP_OnPlayerStartDebone();
	void BP_OnPlayerSuccessRescue(const class AM1Player* RescueTarget);
	void BP_OnPlayerUpdateCameraTransform();
	void BP_OnPlayerWireHooked(const struct FVector& HookedLocation);
	void BP_OnRemainingTimeAlertStarted();
	void BP_OnRoundStarted();
	void BP_OnTimingHit();
	void BP_OnTimingMiss();
	void BP_OnTrapHit(const struct FTransform& TargetTransform);
	void BP_OnTrapSectionStarted(class UAkAudioEvent* InSectionEvent);
	void BP_OnUIHideLoadingScreen();
	void BP_OnUIInGameContentClosed(class UAkAudioEvent* AkEvent);
	void BP_OnUIInGameContentOpened(class UAkAudioEvent* AkEvent);
	void BP_OnUIPlayAkEvent(class UAkAudioEvent* AkEvent, EUIEventType UIType);
	void BP_OnUIPlayAkEventByName(const class FString& InEventName, EUIEventType UIType);
	void BP_OnUIPlayDefaultHitMarkerSound(EUIEventType UIType);
	void BP_OnUIPlayWeaknessKillHitMarkerSound(EUIEventType UIType);
	void BP_OnUIShowLoadingScreen();
	void BP_OnWireHooked(EPhysicalSurface HitSurfaceType, bool bHookSuccess);
	void BP_OnWireMiss();
	void BP_PauseAll();
	void BP_ResumeAll();
	void BP_StopAllAkEventOfOwner();
	void ExecuteUbergraph_BP_AKComponent(int32 EntryPoint);
	void GetDamagedArg(EM1DynamicDialogueStimulus Stimulus, class FString* Event, const TArray<class FString>* Array);
	struct FVector GetDamagedLocation(double Angle);
	void GetDeboneArg(class FString* Event, const TArray<class FString>* Array);
	void GetDeboneSuccessArg(class FString* Event, const TArray<class FString>* Array);
	void GetEmptyRoundsArg(EM1DynamicDialogueStimulus Stimulus, class FString* Event, const TArray<class FString>* Array);
	void GetEpicbossKillArg(const class FString& SourceString, class FString* Event, const TArray<class FString>* Array);
	void GetJoinMissionArg(class FString* Event, const TArray<class FString>* Array);
	void GetOrCreateAkComponent(class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Offset, bool* bComponentCreated, class UAkComponent** OutAkComponent);
	void GetRegCampArg(class FString* Event, const TArray<class FString>* Array);
	void GetRescueArg(const class AActor* Object, class FString* Event, const TArray<class FString>* Array);
	void GetReviveByRescue(class AM1Player* Helper, class FString* Event, const TArray<class FString>* Array);
	void GetReviveByRevive(class AM1Player* Helper, class FString* Event, const TArray<class FString>* Array);
	void NpcAkEventCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void TryPlayUI_AkEvent(class UAkAudioEvent* AkEvent);
	void TryPlayUI_AkEventByName(const class FString& AkEventName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AKComponent_C">();
	}
	static class UBP_AKComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AKComponent_C>();
	}
};

}

